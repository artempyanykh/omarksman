name: Release

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Release name'
        required: true

jobs:
  build:
    name: Build the release on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
        ocaml-compiler:
          - 4.14.x

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          dune-cache: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Install opam packages
        run: opam install . --with-test

      - name: Run build
        run: make build

      - name: Upload the binary
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-main.exe
          path: _build/default/bin/main.exe
          if-no-files-found: error
  
  release:
    name: Create the release for ${{ matrix.os.runner }}
    needs: build

    strategy:
      matrix:
        os:
          - runner: windows-latest
            release_exe: marksman.exe
          - runner: ubuntu-latest
            release_exe: marksman-linux
          - runner: macos-latest
            release_exe: marksman-macos

    runs-on: ${{ matrix.os.runner }}

    steps:
      - id: download
        name: Download the release binary
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.os.runner }}-main.exe

      - name: Rename the binary
        shell: python
        run: |
          import os
          os.rename("main.exe", "${{ matrix.os.release_exe }}")
      - name: Create a GH release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.os.release_exe }}
          name: ${{ github.event.inputs.name }}
          tag_name: ${{ github.event.inputs.name }}
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}